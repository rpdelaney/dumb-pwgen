---
name: CI
# Docs on poetry runner for github actions:
# https://github.com/marketplace/actions/install-poetry-action

on:
  pull_request:
  push:
    branches: [main]
    paths:
      - dumbpw/*
      - tests/*
      - pyproject.toml
      - poetry.lock
      - .coveragerc
      - .pre-commit-config.yaml

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # ----------------------------------------------
      # check-out repo and set-up python
      # ----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # ----------------------------------------------
      # build virtual environment and install
      # ----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies if cached venv not found
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install module
        run: poetry install --no-interaction

      - name: Install pre-commit
        run: pip install pre-commit
      - name: cache
        uses: actions/cache@v2
        with:
          key: pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          path: ~/.cache/pre-commit
      - name: Pre-commit checks
        run: pre-commit run --all-files --show-diff-on-failure

  test:
    needs: lint
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.8", "3.9", "3.10"]
    runs-on: ${{ matrix.os }}
    steps:
      # ----------------------------------------------
      # check-out repo and set-up python
      # ----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # ----------------------------------------------
      # build virtual environment and install
      # ----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies if cached venv not found
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install module
        run: poetry install --no-interaction

      # ----------------------------------------------
      # run tests
      # ----------------------------------------------
      - name: Run tests
        run: poetry run pytest

  # ----------------------------------------------
  # publish coverage report
  # ----------------------------------------------
  publish:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Publish coverage report
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
        with:
          coverageLocations: ${{github.workspace}}/cov/coverage.xml:coverage.py
